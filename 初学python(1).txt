1.字符串用“或‘都可以，打印，会变空格；
2.输出用print(),字符串用引号，输入用input(显示内容)，返回值是str类型；
3.#开头是注释，以冒号:结尾时，缩进的语句视为代码块，大小写敏感；
4.\表转义，\转义符表示正常输出，r''表示内部字符串不转义；
5.bool值False和Ture，注意大小写；not表非；None表空；
6.%输出，例>>>'Hello, %s' % 'world'
           Hello, world
7.数据类型list是一种有序的集合[]，可以随时添加和删除其中的元素(多种数据类型)，类似于动态数组；
  例；直接获取倒数第一个元素；classmate[-1]
      插；classmates.insert(1, 'Jack')
	  取；classmates.pop(i)
	  长度；len(classmate)
	  list元素也可以是另一个list；s = ['python', 'java', ['asp', 'php'], 'scheme']
8.有序列表tuple叫元组,和list非常类似，创建tuple和创建list唯一不同之处是用( )替代了[ ]。
  但是tuple一旦初始化就不能修改，代码更安全； t = (1,)
例：一个“可变的”tuple：
	>>> t = ('a', 'b', ['A', 'B'])
	>>> t[2][0] = 'X'
	>>> t[2][1] = 'Y'
	>>> t
	('a', 'b', ['X', 'Y'])
	改变的其实是tuble里的list.
9.for x in ...循环就是依次把list或tuple中的每个元素迭代出来代入变量x，然后执行缩进块的语句(操作）
10.range(101)就可以生成0-100的整数序列，再通过list()函数可以转换为list，例list(range(5))。
11.键值对：初始化例，d = {'Michael': 95, 'Bob': 75, 'Tracy': 85}
                     d['Michael'] = 95
			操作：d.get('Thomas')，d.pop('Bob')
12.和list比较，dict有以下几个特点：
		(1)查找和插入的速度极快，不会随着key的增加而变慢；
		(2)需要占用大量的内存，内存浪费多。
		(3)dict内部是无序的.
   而list相反：
		(1)查找和插入的时间随着元素的增加而增加；
		(2)占用空间小，浪费内存很少。
   所以，dict是用空间来换取时间的一种方法。
13.set和dict类似，也是一组key的集合，但不存储value,所以key不会重复。
	   操作；s.add(4)、s.remove(4)
	            a = 'abc'
			>>> b = a.replace('a', 'A')
			>>> b 输出 'Abc'
			>>> a 输出 'abc'
14.函数名是指向一个函数的变量，所以这个变量可以随意指向其他函数。
15.定义一个函数要使用def语句,例def f(x):,return None可以简写为return. 
   如果想定义一个什么事也不做的空函数或者空对象，可以用pass语句.
16.静态语言在定义变量时必须指定变量类型，例：int a =23
17.一个字节能表示的最大的整数就是255（二进制11111111=十进制255）,0 - 255被用来表示大小写英文字母、数字和一些符号，
   这个编码表被称为ASCII编码，比如大写字母 A 的编码是65，小写字母 z 的编码是122。
18.Python把0、空字符串''和None看成 False，其他数值和非空字符串都看成 True  
19.d = {
    'Adam': 95,
    'Lisa': 85,
    'Bart': 59
}
for x in d:
    print x ,':',d[x]	//逗号的意思是分别打印
	print x+': '+str(d[x])
20.创建 set 的方式是调用 set() 并传入一个 list，list的元素将作为set的元素,即去掉了list里的重复元素。
   例：set(['A', 'C', 'B'])
   s = set([('Adam', 95), ('Lisa', 85), ('Bart', 59)])
21.cmp(a,b)、sum(list),len(list),math.cos,max(list),min(list),sorted(list)
22.python的函数返回多值其实就是返回一个tuple(a,b,c,....),函数的默认参数的作用是简化调用,
   Python解释器会把传入的一组参数组装成一个tuple传递给可变参数.传入传出都是tuple。
23.L[0:45:5]表示，从索引0开始取，每隔5个位置取一个数，直到索引45为止.
24. 1. 有序集合：list，tuple，str和unicode；
	2. 无序集合：set
	3. 无序集合并且具有 key-value 对：dict
25.索引迭代也不是真的按索引访问，而是由 enumerate() 函数自动把每个元素变成 (index, element) 
   这样的tuple，再迭代，就同时获得了索引和元素本身
26.zip()函数可以把两个 list 变成一个 list：？？
>>> zip([10, 20, 30], ['A', 'B', 'C'])
   [(10, 'A'), (20, 'B'), (30, 'C')]//tuple2
27.values()和itervalues()的区别：
   1. values() 方法实际上把一个 dict 转换成了只包含 value 的list。
   2. 但是 itervalues() 方法不会转换，它会在迭代过程中依次从 dict 中取出 value，
      所以 itervalues() 方法比 values() 方法节省了生成 list 所需的内存。
   3.和values()有一个()类似,items()也有一个对应的 iteritems()，
	 iteritems() 不把dict转换成list,而是在迭代过程中不断给出 tuple，所以， iteritems() 不占用额外的内存。
28.def toUppers(L):
    return [x.upper() for x in L if isinstance(x,str)]
print toUppers(['Hello', 'world', 101])	
	输出：['HELLO', 'WORLD']
29. 1)capitalize() 首字母大写，其余全部小写 
	2)upper() 全转换成大写
	3)lower() 全转换成小写
	4)title() 标题首字大写，如"i love python".title()  "I love python"
	5)map(f,list)通过把函数 f 依次作用在 list 的每个元素上，得到一个新的 list 并返回。
	6)reduce(f,list,initial)传入的函数 f 必须接收两个参数,取出元素都做f函数的操作，累加、累积或其他
	7)filter(f,list)这个函数 f 的作用是对每个元素进行判断，返回 True或 False，
	  filter()根据判断结果自动过滤掉不符合条件的元素，返回由符合条件元素组成的新list。
	8) sorted(list，cmp)也是一个高阶函数，默认从小到大排，它可以接收一个比较函数来实现自定义排序
	 比较函数的定义：返回1，-1或0
	 def reversed_cmp(x, y):
	 		if x < y:
				return 1           //返回1的排序
			elif x > y:
				return -1
			return 0
30.小数对1求余不为0.
   函数g也是一个对象，函数名g就是指向函数g的变量，所以，最外层函数f可以返回变量g，进而可调用g()。
31.闭包的特点是返回的函数引用了外层函数的局部变量，所以，要正确使用闭包，
   就要确保引用的局部变量在函数返回后不能变。可以在参数里设置初始值=外部函数的变量,定义时即初始化赋值了。
   例：
	def count():
		fs = []
		for i in range(1, 4):
			def f(a=i)
				return a*a
			fs.append(f)
		return fs
		
	f1, f2, f3 = count()
	print f1(), f2(), f3()
	方法：问题的产生是因为函数只在执行时才去获取外层参数i，若函数定义时可以获取到i，
		  问题便可解决。而默认参数正好可以完成定义时获取i值且运行函数时无需参数输入的功能，
		  所以在函数f()定义中改为f(m = i),函数f返回值改为m*m即可.
32. lambda x: x * x ，关键字lambda 表示匿名函数，冒号前面的 x 表示函数参数，后面为操作，只能有一个表达式
    myabs = lambda x: -x if x < 0 else x	//三元操作符为一个表达式
33.装饰器：@new_fn					def f1(x)
            def f1(x):					return x*2
				return x*2			f1=new_fn(f1)
34.使用 decorator 用Python提供的 @ 语法，这样可以避免手动编写 f = decorate(f) 这样的代码。
定义decorator
	def log(f):        #定义装饰器高阶函数，以要装饰的函数f作为参数
		def fn(x):        #内部相当于重构要装饰的函数f，重命名为fn
			print 'call ' + f.__name__ + '()...'        #加特技print
			return f(x)        #为了不重写原来的函数f的代码，所以用return f(x)代替原来的代码。
		return fn        将被装饰过的新的函数fn返回
35.如果我们只希望导入用到的math模块的某几个函数,from math import pow, sin, log
36.try:
    from cStringIO import StringIO
except ImportError:
    from StringIO import StringIO
37.装饰器的理解：1）高阶函数：名字表示装饰的意思，传入一个原始函数f，返回的是装饰后的装饰函数fn。
				 2）原始函数：在装饰器中并不改变其代码，而是装饰函数加上了装饰代码，高阶函数赋值给它变成装饰函数。
				 3）装饰函数组成：（1）装饰的代码
								  （2）返回值是返回原始函数的执行结果，不改变原始结果，只添加装饰，
								   高阶函数返回的是装饰函数，相当于（1）和（2）相加，所以能起到装饰的效果。
								  （3）参数为原始函数的参数，因为它要返回原始函数的执行结果，且最后原始函数也变成了装饰函数。
				 4）如果decorator本身需要传入参数，那就需要编写一个返回decorator的高阶函数。
				 例：一个log的代码
						def log(f):
							def fn(x):
								print 'call ' + f.__name__ + '()...'
								return f(x)
							return fn
				    调用时写
						@log
						def factorial(n):
							return reduce(lambda x,y: x*y, range(1, n+1))
						print factorial(10)
					输出结果：
							  call factorial()...
                              3628800
38.functools.partial就是帮助我们创建一个偏函数的，不需要我们自己定义int2()，可以直接使用下面的代码创建一个新的函数int2：
	>>> import functools
	>>> int2 = functools.partial(int, base=2)
	>>> int2('1000000')
	64
	>>> int2('1010101')
	85
39.在定义 Person 类时，可以为Person类添加一个特殊的__init__()方法，当创建实例时，__init__()方法被自动调用，我们就能在此为每个实例都统一加上以下属性：
	class Person(object):
		def __init__(self, name, gender, birth):
			self.name = name
			self.gender = gender
			self.birth = birth
	__init__() 方法的第一个参数必须是 self
40.Python对属性权限的控制是通过属性名来实现的，如果一个属性由双下划线开头(__)，该属性就无法被外部访问。__init_
   如果一个属性以"__xxx__"的形式定义，那它又可以被外部访问了，以"__xxx__".
   _xxx 可以在子类中使用.__xxx 不可以在子类中使用。
41.实例属性每个实例各自拥有，互相独立，而类属性有且只有一份。由于Python是动态语言，类属性也是可以动态添加和修改的.
   __int__（self，） 初始化实例的属性，同时也具备普通函数的功能，每执行一次就计算函数内容的运算，函数里面引用类的属性需要带上类名。
   当实例属性和类属性重名时，实例属性优先级高，它将屏蔽掉对类属性的访问。
42.我们在 class 中定义的实例方法其实也是属性，它实际上是一个函数对象:p1.get_grade 返回的是一个函数对象，但这个函数是一个绑定到实例的函数，p1.get_grade()才是方法调用。
   因为方法也是一个属性，所以，它也可以动态地添加到实例上，只是需要用 types.MethodType() 把类外函数变成对象函数。  
	例：import types 
		def fn_get_grade(self):
			if self.score >= 80:
				return 'A'
			if self.score >= 60:
				return 'B'
			return 'C'

		class Person(object):
			def __init__(self, name, score):
				self.name = name
				self.score = score

		p1 = Person('Bob', 90)
		p1.get_grade = types.MethodType(fn_get_grade, p1, Person)
43.凡是可作用于for循环的对象都是Iterable类型；
	凡是可作用于next()函数的对象都是Iterator类型，它们表示一个惰性计算的序列；
	集合数据类型如list、dict、str等是Iterable但不是Iterator，不过可以通过iter()函数获得一个Iterator对象。
	Python的for循环本质上就是通过不断调用next()函数实现的
44.函数式编程就是一种抽象程度很高的编程范式，纯粹的函数式编程语言编写的函数没有变量，因此，任意一个函数，只要输入是确定的，输出就是确定的，
  这种纯函数我们称之为没有副作用。而允许使用变量的程序设计语言，由于函数内部的变量状态不确定，同样的输入，可能得到不同的输出，因此，这种函数是有副作用的。
  函数式编程的一个特点就是，允许把函数本身作为参数传入另一个函数，还允许返回一个函数！
45.sorted()函数也是一个高阶函数，它还可以接收一个key函数来实现自定义的排序,
key指定的函数将作用于list的每一个元素上，并根据key函数返回的结果进行排序。  
46.def multipliers():
    return [lambda x : i * x for i in range(4)]    //此处返回的是匿名函数
	print([m(2) for m in multipliers()])           //m指向了匿名函数，m(2)时才对函数进行了调用
输出是[6, 6, 6, 6]
47.当我们定义一个class的时候，我们实际上就定义了一种数据类型。我们定义的数据类型和Python自带的数据类型，比如str、list、dict没什么两样.
48.对于一个变量，我们只需要知道它是Animal类型，无需确切地知道它的子类型，就可以放心地调用run()方法，而具体调用的run()方法是作用在Animal、Dog、Cat还是Tortoise对象上，
由运行时该对象的确切类型决定，这就是多态真正的威力：调用方只管调用，不管细节，而当我们新增一种Animal的子类时，只要确保run()方法编写正确，不用管原来的代码是如何调用的。这就是著名的“开闭”原则：
49.如果要判断一个对象是否是函数怎么办？可以使用types模块中定义的常量
例：type(fn)==types.FunctionType
	type(abs)==types.BuiltinFunctionType
	type(lambda x: x)==types.LambdaType
	type((x for x in range(10)))==types.GeneratorType
50.type()函数可以查看一个类型或变量的类型，Hello是一个class，它的类型就是type，而h是一个实例，它的类型就是class Hello。
我们说class的定义是运行时动态创建的，而创建class的方法就是使用type()函数。